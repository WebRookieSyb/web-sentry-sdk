var WebSentrySDK = (function (exports) {
    'use strict';

    var GlobalObject = {};
    var getGlobalObject = function () {
        return GlobalObject;
    };

    var global = getGlobalObject();
    var PREFIX = 'Web Sentry Logger ';
    var Logger = /** @class */ (function () {
        function Logger(prefix) {
            if (prefix === void 0) { prefix = 'Logger '; }
            this.enabled = false;
            this.prefix = prefix;
        }
        Logger.prototype.disable = function () {
            this.enabled = false;
        };
        Logger.prototype.enable = function () {
            this.enabled = true;
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!this.enabled) {
                return;
            }
            console.log(this.prefix + "[Log]: " + args.join(' '));
        };
        Logger.prototype.wran = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!this.enabled) {
                return;
            }
            console.log(this.prefix + "[Wran]: " + args.join(' '));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!this.enabled) {
                return;
            }
            console.log(this.prefix + "[Error]: " + args.join(' '));
        };
        return Logger;
    }());
    //保证全局单例
    global.__WebSentryGlobal__ = global.__WebSentryGlobal__ || {};
    var logger = global.__WebSentryGlobal__.logger || (global.__WebSentryGlobal__.logger = new Logger(PREFIX));

    var global$1 = getGlobalObject();
    var EventBus;
    (function (EventBus) {
        EventBus["ERROR"] = "ERROR";
        EventBus["CHANGE_ACTIVE"] = "CHANGE_ACTIVE";
        EventBus["CATCH_ERROR"] = "CATEH_ERROR";
        EventBus["GET_PERFORMANCE"] = "GET_PERFORMANCE";
        EventBus["GET_CLIENT"] = "GET_CLIENT";
    })(EventBus || (EventBus = {}));
    var Hub = /** @class */ (function () {
        function Hub() {
            this.eventList = [];
        }
        Hub.prototype.emit = function (event, date) {
            (this.eventList[event] || []).forEach(function (handle) { return handle(date); });
        };
        Hub.prototype.on = function (event, handle) {
            if (!this.eventList[event]) {
                this.eventList[event] = [];
            }
            this.eventList[event].push(handle);
        };
        Hub.prototype.off = function (event, handle) {
            var index = (this.eventList[event] || []).findIndex(function (h) { return h === handle; });
            if (index > -1) {
                this.eventList[event].splice(index, 1);
            }
        };
        return Hub;
    }());
    global$1.__WebSentryGlobal__ = global$1.__WebSentryGlobal__ || {};
    var hub = global$1.__WebSentryGlobal__.hub || (global$1.__WebSentryGlobal__.hub = new Hub());

    var Page = /** @class */ (function () {
        function Page() {
            this.isActive = true;
            this.init();
        }
        Page.prototype.init = function () {
            var _this = this;
            hub.on(EventBus.CHANGE_ACTIVE, function (activeStatus) {
                logger.log("Page accepted " + EventBus.CHANGE_ACTIVE + ": " + activeStatus);
                _this.isActive = activeStatus;
            });
            window.addEventListener('load', function () {
                if (!_this.isActive) {
                    return;
                }
                var performance = _this.getPagePerformance();
                logger.log("Page get performance: " + JSON.stringify(performance));
                hub.emit(EventBus.GET_CLIENT, performance);
            });
        };
        Page.prototype.getPagePerformance = function () {
            if (!window.performance || !window.performance.timing) {
                return;
            }
            var timing = window.performance.timing;
            var performance = {
                redirectt: (timing.redirectEnd - timing.redirectStart) / 1000,
                dnst: (timing.domainLookupEnd - timing.domainLookupStart) / 1000,
                tcpt: (timing.connectEnd - timing.connectStart) / 1000,
                wit: (timing.domLoading - timing.fetchStart) / 1000,
                responset: (timing.responseEnd - timing.requestStart) / 1000,
                domreadyt: (timing.responseEnd - timing.navigationStart) / 1000,
                domcompletet: (timing.domComplete - timing.domLoading) / 1000,
                domrendert: (timing.domInteractive - timing.domLoading) / 1000,
                scriptt: (timing.domContentLoadedEventEnd - timing.domContentLoadedEventStart) / 1000
            };
            performance.allt = performance.redirectt + performance.dnst + performance.tcpt + performance.responset + performance.domcompletet + performance.domrendert;
            return performance;
        };
        return Page;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var Global = /** @class */ (function () {
        function Global(options) {
            this.isActive = true;
            this.errordefo = {
                t: 0,
                n: 'js',
                msg: '',
                data: {}
            };
            //防止引用
            this.options = __assign({}, options);
            this.init();
        }
        Global.prototype.init = function () {
            var _this = this;
            hub.on(EventBus.CHANGE_ACTIVE, function (activeStatus) {
                logger.log("Global accepted " + EventBus.CHANGE_ACTIVE + ": " + activeStatus);
                _this.isActive = activeStatus;
            });
            this.installGlobalErrorHandle();
        };
        Global.prototype.installGlobalErrorHandle = function () {
            this.oldErrorHandler = window.onerror;
            if (this.options.sendError === true) {
                window.onerror = this.trackWindowOnError.bind(this);
            }
            // if (this.options.sendUnhandleRejection === true) {
            //     window.addEventListener('unhandledrejection', this.trackUnhandledRejection.bind(this));
            // }
            // 静态资源异常
            if (this.options.sendUnloadError == true) {
                window.addEventListener('error', this.trackUnloadError.bind(this), true);
            }
        };
        Global.prototype.trackWindowOnError = function (msg, url, lineNo, col, error) {
            alert(5);
            // 防止隐式转换
            if (this.isActive === false) {
                logger.log("Global get error, but do nothing");
                return;
            }
            logger.log("Global get error");
            var defaults = Object.assign({}, this.errordefo);
            //异步处理
            setTimeout(function () {
                // 不一定所有浏览器都支持col参数
                col = col || window || 0;
                defaults.msg = error && error.stack ? error.stack.toString() : msg;
                defaults.t = new Date().getTime();
                defaults.data = {
                    resourceUrl: url,
                    line: lineNo,
                    col: col
                };
                logger.log("Global track error info: " + JSON.stringify(defaults));
                hub.emit(EventBus.CATCH_ERROR, defaults);
            }, 0);
            //不覆盖原始的异常处理
            if (this.oldErrorHandler) {
                this.oldErrorHandler.apply(this, arguments);
            }
        };
        // private trackUnhandledRejection(err: PromiseRejectionEvent) {
        //     if (this.isActive === false) {
        //         logger.log(`Global get error, but do nothing`)
        //         return;
        //     }
        //     logger.log(`Global get error`)
        //     const error = err || err.reason;
        //     const message = error.message || '';
        //     const stack = error.stack || '';
        // }
        Global.prototype.trackUnloadError = function (err) {
            alert(6);
            if (this.isActive === false) {
                logger.log("Global get error, but do nothing");
                return;
            }
            logger.log("Global get error");
            var defaults = Object.assign({}, this.errordefo);
            defaults.n = 'resource';
            defaults.t = new Date().getTime();
            defaults.msg = err.target.localName + ' is load error';
            defaults.data = {
                target: err.target.localName,
                type: err.type,
                resourceUrl: err.target.href || err.target.currentSrc
            };
            if (err.target !== window) {
                logger.log("Global track error info: " + JSON.stringify(defaults));
                hub.emit(EventBus.CATCH_ERROR, defaults);
            }
        };
        return Global;
    }());

    var defaultOptions = {
        getPage: true,
        getError: true,
        getUnloadError: true,
        getClientInfo: true,
        date: undefined
    };
    var globalIns;
    var pageIns;
    var init = function (options, fn) {
        // 合并默认参数
        options = Object.assign({}, defaultOptions, options);
        // 是否开启debug
        if (options.debug === true) {
            // 开启logger
            logger.enable();
        }
        logger.log('start logging ...');
        if (options.getError === true) {
            globalIns = new Global({
                sendError: options.getError,
                // sendUnhandledRejection:options.getUnhandledRejection,
                sendUnloadError: options.getUnloadError
            });
        }
        if (options.getPage === true) {
            pageIns = new Page();
        }
    };
    var close = function () {
        logger.log('close sdk');
        hub.emit(EventBus.CHANGE_ACTIVE, false);
    };

    exports.close = close;
    exports.hub = hub;
    exports.init = init;

    return exports;

}({}));
