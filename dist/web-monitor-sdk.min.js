var WebSentrySDK = (function (exports) {
    'use strict';

    var GlobalObject = {};
    var getGlobalObject = function () {
        return GlobalObject;
    };

    var global = getGlobalObject();
    var PREFIX = 'Web Sentry Logger ';
    var Logger = /** @class */ (function () {
        function Logger(prefix) {
            if (prefix === void 0) { prefix = 'Logger '; }
            this.enabled = false;
            this.prefix = prefix;
        }
        Logger.prototype.disable = function () {
            this.enabled = false;
        };
        Logger.prototype.enable = function () {
            this.enabled = true;
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!this.enabled) {
                return;
            }
            console.log(this.prefix + "[Log]: " + args.join(' '));
        };
        Logger.prototype.wran = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!this.enabled) {
                return;
            }
            console.log(this.prefix + "[Wran]: " + args.join(' '));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!this.enabled) {
                return;
            }
            console.log(this.prefix + "[Error]: " + args.join(' '));
        };
        return Logger;
    }());
    global.__WebSentryGlobal__ = global.__WebSentryGlobal__ || {};
    var logger = global.__WebSentryGlobal__.logger || (global.__WebSentryGlobal__.logger = new Logger(PREFIX));

    var global$1 = getGlobalObject();
    var EventBus;
    (function (EventBus) {
        EventBus["ERROR"] = "ERROR";
        EventBus["CHANGE_ACTIVE"] = "CHANGE_ACTIVE";
        EventBus["CATCH_ERROR"] = "CATEH_ERROR";
        EventBus["GET_PERFORMANCE"] = "GET_PERFORMANCE";
        EventBus["GET_CLIENT"] = "GET_CLIENT";
    })(EventBus || (EventBus = {}));
    var Hub = /** @class */ (function () {
        function Hub() {
            this.eventList = [];
        }
        Hub.prototype.emit = function (event, date) {
            (this.eventList[event] || []).forEach(function (handle) { return handle(date); });
        };
        Hub.prototype.on = function (event, handle) {
            if (!this.eventList[event]) {
                this.eventList[event] = [];
            }
            this.eventList[event].push(handle);
        };
        Hub.prototype.off = function (event, handle) {
            var index = (this.eventList[event] || []).findIndex(function (h) { return h === handle; });
            if (index > -1) {
                this.eventList[event].splice(index, 1);
            }
        };
        return Hub;
    }());
    global$1.__WebSentryGlobal__ = global$1.__WebSentryGlobal__ || {};
    var hub = global$1.__WebSentryGlobal__.hub || (global$1.__WebSentryGlobal__.hub = new Hub());

    var Page = /** @class */ (function () {
        function Page() {
            this.isActive = true;
            this.init();
        }
        Page.prototype.init = function () {
            var _this = this;
            hub.on(EventBus.CHANGE_ACTIVE, function (activeStatus) {
                logger.log("Page accepted " + EventBus.CHANGE_ACTIVE + ": " + activeStatus);
                _this.isActive = activeStatus;
            });
            window.addEventListener('load', function () {
                if (!_this.isActive) {
                    return;
                }
                var performance = _this.getPagePerformance();
                logger.log("Page get performance: " + JSON.stringify(performance));
                hub.emit(EventBus.GET_CLIENT, performance);
            });
        };
        Page.prototype.getPagePerformance = function () {
            if (!window.performance || !window.performance.timing) {
                return;
            }
            var timing = window.performance.timing;
            var performance = {
                redirectt: (timing.redirectEnd - timing.redirectStart) / 1000,
                dnst: (timing.domainLookupEnd - timing.domainLookupStart) / 1000,
                tcpt: (timing.connectEnd - timing.connectStart) / 1000,
                wit: (timing.domLoading - timing.fetchStart) / 1000,
                responset: (timing.responseEnd - timing.requestStart) / 1000,
                domreadyt: (timing.responseEnd - timing.navigationStart) / 1000,
                domcompletet: (timing.domComplete - timing.domLoading) / 1000,
                domrendert: (timing.domInteractive - timing.domLoading) / 1000,
                scriptt: (timing.domContentLoadedEventEnd - timing.domContentLoadedEventStart) / 1000
            };
            performance.allt = performance.redirectt + performance.dnst + performance.tcpt + performance.responset + performance.domcompletet + performance.domrendert;
            return performance;
        };
        return Page;
    }());

    var defaultOptions = {
        getPage: true,
        getError: true,
        getUnloadError: true,
        getClientInfo: true,
        date: undefined
    };
    var pageIns;
    var init = function (options, fn) {
        // 合并默认参数
        options = Object.assign({}, defaultOptions, options);
        // 是否开启debug
        if (options.debug === true) {
            // 开启logger
            logger.enable();
        }
        logger.log('start logging ...');
        if (options.getPage === true) {
            pageIns = new Page();
        }
    };
    var close = function () {
        logger.log('close sdk');
        hub.emit(EventBus.CHANGE_ACTIVE, false);
    };

    exports.close = close;
    exports.hub = hub;
    exports.init = init;

    return exports;

}({}));
